package com.revature.bank.menus;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Scanner;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.revature.bank.models.User;
import com.revature.bank.repositories.AccountDaoImpl;
import com.revature.bank.repositories.UserDaoImpl;

public class AccountMenu {
	
	public static Logger logger = LogManager.getLogger("com.revature.bank");
	//private static User user = null;
	User user = new User();
	final static UserDaoImpl dao = UserDaoImpl.getInstance();
	private static Scanner sc = new Scanner(System.in);
	AccountDaoImpl accDao = new AccountDaoImpl();
	
	DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
	Date dateobj = new Date();
	//System.out.println(df.format(dateobj));
	
	public void deposit(User user) {
		System.out.println(user.getName() + " your current balance is : $" + user.getBalance()+" as on "+df.format(dateobj));
		System.out.println("Enter the amount to deposit: ");
		System.out.print("$");
		float deposit = sc.nextFloat();
		Map<String, User> m = dao.getAllUsers();
		User enteredUser = m.get(user.getName()); 
		if(deposit > 0) {
			logger.info("Deposit amount entered: " + deposit);
			float balance = user.deposit(deposit);
			dao.updateDeposit(enteredUser, balance);
			accDao.transaction(enteredUser,"deposit",deposit);
		}
		else
			System.out.println("Please enter valid amount.");

		System.out.println(user.getName() + " your new balance is : $" + user.getBalance());
	}

	public void withdraw(User user) {
		System.out.println(user.getName() + " your current balance is : $" + user.getBalance()+" as on "+df.format(dateobj));
		System.out.println("Enter the amount to withdraw: ");
		System.out.print("$");
		float withdrawal = sc.nextFloat();
		Map<String, User> m = dao.getAllUsers();
		User enteredUser = m.get(user.getName()); 
		if(withdrawal > 0) {
			logger.info("Withdrawal amount entered: " + withdrawal);
			float balance = user.withdraw(withdrawal);
			dao.updateDeposit(enteredUser, balance);
			accDao.transaction(enteredUser,"withdraw",withdrawal);
		}
		else
			System.out.println("Please enter valid amount.");

		System.out.println(user.getName() + " your new balance is : $" + user.getBalance());
	}

	public void transfer(User user) {
		System.out.println(user.getName() + " your current balance is : $" + user.getBalance()+" as on "+df.format(dateobj));
		System.out.println("Enter the amount to Transfer: ");
		System.out.print("$");
		float transer = Integer.parseInt(sc.nextLine());
		//int var = Integer.parseInt(sc.nextLine());
		
		Map<String, User> m = dao.getAllUsers();
		User enteredUser = m.get(user.getName()); 
		float balance = user.withdraw(transer);
		//String recipientUser = null;
		
		if(transer > 0) {
			logger.info("Transfer amount entered: " + transer);
			dao.updateDeposit(enteredUser, balance);
			accDao.transaction(enteredUser,"transferred",transer);
		}
		else
			System.out.println("Please enter valid amount.");
		
		boolean authenticated = false;
		System.out.println("authenticated: "+authenticated);
		
		System.out.println("Enter the recipient user name: ");
		String recipientUser = sc.nextLine();
		String recUser = "user2";//dao.getRecUser(recipientUser);
		user.setRecipientUser(recipientUser);
		
		logger.info("recipientUser: " + recipientUser);
		logger.info("user.getRecipientUser(): " + user.getRecipientUser());
		
		if (!recUser.equalsIgnoreCase(user.getRecipientUser())) {
			System.out.println("User doesn't exist: " + recipientUser);
			//continue;
		}
		authenticated = true;
		
	/*	while (authenticated) {
			System.out.println("Enter the recipient user name: ");
			recipientUser = sc.nextLine();
			String recUser = dao.getRecUser(recipientUser);
			user.setRecipientUser(recipientUser);
			
			logger.info("recipientUser: " + recipientUser);
			logger.info("user.getRecipientUser(): " + user.getRecipientUser());
			
			if (!recUser.equalsIgnoreCase(user.getRecipientUser())) {
				System.out.println("User doesn't exist: " + recipientUser);
				continue;
			}
			authenticated = true;
		}*/
		System.out.println(user.getName() + " you transferred amount  $" +transer+ " to "+recipientUser
							+ ". your new balance is : $" + user.getBalance());
		
		if(authenticated) {
			float recAmnt = user.deposit(transer);
			user.setName(recipientUser);
			dao.updateDeposit(user, recAmnt);
			accDao.transaction(enteredUser,"Received",transer);
		}
		
	}

}
