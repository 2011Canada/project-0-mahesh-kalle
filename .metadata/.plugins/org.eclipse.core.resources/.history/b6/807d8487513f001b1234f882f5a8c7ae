package com.revature.bank.menus;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Scanner;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.revature.bank.launcher.BankAppLauncher;
import com.revature.bank.models.Account;
import com.revature.bank.models.User;
import com.revature.bank.repositories.AccountDaoImpl;
import com.revature.bank.repositories.UserDaoImpl;

public class AccountMenu {
	
	//public static Logger logger = LogManager.getLogger("com.revature.bank");
	//private static User user = null;
	User user = new User();
	final static UserDaoImpl dao = UserDaoImpl.getInstance();
	private static Scanner sc = new Scanner(System.in);
	AccountDaoImpl accDao = new AccountDaoImpl();
	
	DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
	Date dateobj = new Date();
	
	public void deposit(User user) {
		System.out.println(user.getName() + " your current balance is : $" + user.getBalance()+" as on "+df.format(dateobj));
		System.out.println("Enter the amount to deposit: ");
		System.out.print("$");
		while (!sc.hasNextInt()) {
	      System.out.println("Input is not a number.");
	      sc.nextLine();
	      return;
	    }
		float deposit = sc.nextFloat();
		System.out.println("Here+++++++++++++++++++++");
		Map<String, User> m = dao.getAllUsers();
		System.out.println("is.................0"+m);
		User enteredUser = m.get(user.getName()); 
		if(deposit > 0) {
			BankAppLauncher.logger.info("Deposit amount entered: " + deposit);
			float balance = user.deposit(deposit);
			System.out.println("enteredUser---------------------"+enteredUser.getName());
			dao.updateDeposit(enteredUser, balance);
			int accId = dao.getAccId(user.getName());
			accDao.transaction(accId, user.getName(),"deposit",deposit);
		}
		else
			System.out.println("Please enter valid amount.");

		System.out.println(user.getName() + " your new balance is : $" + user.getBalance());
	}

	public void withdraw(User user) {
		System.out.println(user.getName() + " your current balance is : $" + user.getBalance()+" as on "+df.format(dateobj));
		System.out.println("Enter the amount to withdraw: ");
		System.out.print("$");
		while (!sc.hasNextInt()) {
	      System.out.println("Input is not a number.");
	      sc.nextLine();
	      return;
	    }
		float withdrawal = sc.nextFloat();
		Map<String, User> m = dao.getAllUsers();
		User enteredUser = m.get(user.getName()); 
		if(withdrawal > user.getBalance()) {
			System.out.println("You cannot withdraw more than your balance amount");
			return;
		}
		if(withdrawal > 0 ) {
			BankAppLauncher.logger.info("Withdrawal amount entered: " + withdrawal);
			float balance = user.withdraw(withdrawal);
			dao.updateDeposit(enteredUser, balance);
			int accId = dao.getAccId(user.getName());
			accDao.transaction(accId, user.getName(),"withdraw",withdrawal);
		}
		else
			System.out.println("Please enter valid amount.");

		System.out.println(user.getName() + " your new balance is : $" + user.getBalance());
	}

	public void transfer(User user) {
		System.out.println(user.getName() + " your current balance is : $" + user.getBalance()+" as on "+df.format(dateobj));
		System.out.println("Enter the amount to Transfer: ");
		System.out.print("$");
		//float transer = sc.nextFloat();
		float transer = Float.parseFloat(sc.nextLine());
		
		Map<String, User> m = dao.getAllUsers();
		User enteredUser = m.get(user.getName()); 
		float balance = user.withdraw(transer);
		//String recipientUser = null;
		boolean authenticated = false;
		System.out.println("Enter the recipient user name: ");
		String recipientUser = sc.nextLine();
		
		if(recipientUser.equalsIgnoreCase(user.getName())) {
			System.out.println("Self transfer cannot be done. Please choose other users.");
			return;
		}
		
		if(transer > 0) {
			BankAppLauncher.logger.info("Transfer amount entered: " + transer);
			dao.updateDeposit(enteredUser, balance);
			int accId = dao.getAccId(user.getName());
			accDao.transaction(accId, user.getName(),"Transferred to "+recipientUser,transer);
		}
		else
			System.out.println("Please enter valid amount.");
		
		
		while (authenticated) {
			System.out.println("Enter the recipient user name: ");
			recipientUser = sc.nextLine();
			String recUser = dao.getRecUser(recipientUser);
			user.setRecipientUser(recipientUser);
			
			if (!recUser.equalsIgnoreCase(user.getRecipientUser())) {
				System.out.println("User doesn't exist: " + recipientUser);
				continue;
			}
			authenticated = true;
		}
		
		System.out.println("Hello "+user.getName() + "! you transferred amount $" +transer+ " to "+recipientUser
							+ ". your current balance is : $" + user.getBalance());
		
		if(authenticated) {
			float recAmnt = user.deposit(transer);
			//user.setName(recipientUser);
			dao.updateDeposit(user, recAmnt);
			int accId = dao.getAccId(user.getName());
			accDao.transaction(accId, recipientUser,"Received from "+user.getName(),transer);
		}
		
	}
	
	public void logTransactions() {
		AccountDaoImpl accDao = new AccountDaoImpl();

		Map<String, Account> m = accDao.getAllLogs();
		if (m.isEmpty()) {
			System.out.println("No logs found.");
			return;
		}
		
		System.out.println("Begin trasaction logs.");
		System.out.println("Acc Id"+" "+"User Name" + " " + "Amount"+" "+"Tansaction Type"+" "+"Transaction Date");
		for (String k : m.keySet()) {
			Account t = m.get(k);
			//t.isApproved() == "fasle";
			System.out.println(t.getAccountId()+"     "+k + "   " + t.getAmount()+"       "+t.getTansactionType()+"    "+t.getTransDate());
		}
		System.out.println("End of the trasaction logs.");
	}

	
}
